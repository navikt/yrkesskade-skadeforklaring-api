KAFKA_BROKERS: http://localhost:9092
KAFKA_SCHEMA_REGISTRY: http://localhost:8081
NAIS_CLUSTER_NAME: lokal
GCP_TEAM_PROJECT_ID: stub

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS}
    properties:
      security.protocol: SASL_PLAINTEXT
      sasl:
        mechanism: PLAIN
        jaas:
          config: org.apache.kafka.common.security.plain.PlainLoginModule required username="igroup" password="itest";
      schema.registry.url: ${KAFKA_SCHEMA_REGISTRY}
    producer:
      client-id: srvp01
  cloud:
    gcp:
      bigquery:
        enabled: false

service:
  mock: true

# bruk oneshot for Ã¥ opprette topic
kafka:
  topic:
    skadeforklaring-innsendt: privat-yrkesskade-skadeforklaringinnsendt

logging:
  level:
    no.nav.security: DEBUG

virusscan:
  enabled: false

no.nav.security.jwt:
  issuer:
    tokenx:
      discoveryurl: https://fakedings.dev-gcp.nais.io/fake/.well-known/openid-configuration
      accepted_audience: dev-gcp:yrkesskade:yrkesskade-skadeforklaring-api
  client:
    registration:
      pdl:
        token-endpoint-url: https://fakedings.dev-gcp.nais.io/tokenx/token
        grant-type: urn:ietf:params:oauth:grant-type:token-exchange
        authentication:
          client-id: dummy-client-id
          client-jwk: ./src/test/resources/jwks/jwk.json
          client-auth-method: private_key_jwt
        token-exchange:
          audience: dev-fss:pdl:pdl-api
      pdl-maskintilmaskin:
        token-endpoint-url: https://fakedings.dev-gcp.nais.io/fake/aad
        grant-type: client_credentials
        scope: pdl
        authentication:
          client-id: dummy-client-id
          client-secret: dummy-secret
          client-auth-method: client_secret_basic